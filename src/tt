#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

import sys
import curses
import requests
import locale
import time
import re
import os

from datetime import datetime
from json import loads

# Teletekst baseURL
TELETEKST = 'https://teletekst-data.nos.nl/json/%s'
TTRC = os.path.expanduser('~/.ttrc')

opt_charset = 'braille'
opt_auto_refresh = True
opt_refresh_interval = 15
opt_double_width = False

# Tested with python2.7 and python3.5
from html.parser import HTMLParser
import configparser as ConfigParser
unichr = chr
import html as html_funcs
html = HTMLParser()

tt_re = re.compile(u'([\U0000f020-\U0000f100])')
wc_re = re.compile(u'([\U00000020-\U0000007f])')
locale.setlocale(locale.LC_ALL, '')


# Map teletext graphics (2x3) to braille (2x4)
#
#  01 02      01 08
#  04 08 ==>  02 10
#  10 20      04 20
#             40 80

tt_to_br = {
    0x01: 0x03, 0x02: 0x18, 0x04: 0x06,
    0x08: 0x30, 0x10: 0x44, 0x20: 0xa0,
}

tt_to_br_wide = [
    { 0x01: 0x1b, 0x04: 0x36, 0x10: 0xe4 },
    { 0x02: 0x1b, 0x08: 0x36, 0x20: 0xe4 },
]

colors_fg = {
    'blue': curses.COLOR_BLUE,
    'cyan': curses.COLOR_CYAN,
    'green': curses.COLOR_GREEN,
    'magenta': curses.COLOR_MAGENTA,
    'red': curses.COLOR_RED,
    'white': curses.COLOR_WHITE,
    'yellow': curses.COLOR_YELLOW,
}

colors_bg = {
    'bg-blue': curses.COLOR_BLUE,
    'bg-cyan': curses.COLOR_CYAN,
    'bg-green': curses.COLOR_GREEN,
    'bg-magenta': curses.COLOR_MAGENTA,
    'bg-red': curses.COLOR_RED,
    'bg-white': curses.COLOR_WHITE,
    'bg-yellow': curses.COLOR_YELLOW,
}

bookmarks = {
    '!': '100', '@': '200', '#': '300', '$': '400',
    '%': '500', '^': '600', '&': '700', '*': '800',
}

def load(page):
    # Add time to url to avoid caching
    url = (TELETEKST % page) + "?" + str(time.time())
    response = requests.get(url)
    if not response.status_code == 200:
        return {}
    content = loads(response.content.decode('utf-8'))
    return content


def braille_graph(c):
    n = ord(c.group(1)) - 0xf020
    if n >= 64: n = n - 32
    o = ""
    if opt_double_width:
        for w in tt_to_br_wide:
            m = 0
            for v in w:
                if n & v: m = m | w[v]
            o = o + unichr(0x2800 + m)
    else:
        m = 0
        for v in tt_to_br:
            if n & v: m = m | tt_to_br[v]
        o = o + unichr(0x2800 + m)
    return o

def block_graph(c):
    n = ord(c.group(1)) - 0xf020
    if n >= 64: n = n - 32
    o = ""
    m = 0
    for v in tt_to_br:
        if n & v: m = m | tt_to_br[v]

    chars = {
        0:   0x2800,
        3:   0x2598, # ⠃
        7:   0x258E, # ⠇
        24:  0x259D, # ⠘
        27:  0x2580, # ⠛
        30:  0x259E, # ⠞
        31:  0x259B, # ⠟
        51:  0x259A, # ⠳
        54:  0x2580, # ⠶
        55:  0x2599, # ⠷
        56:  0x259D, # ⠸
        59:  0x259C, # ⠻
        63:  0x2580, # ⠿
        68:  0x2596, # ⡄
        70:  0x258C, # ⡆
        71:  0x258C, # ⡇
        94:  0x259E, # ⡞
        95:  0x259B, # ⡟
        116: 0x259E, # ⡴
        118: 0x259B, # ⡶
        124: 0x259E, # ⡼
        126: 0x259E, # ⡾
        127: 0x259B, # ⡿
        160: 0x2597, # ⢠
        167: 0x259A, # ⢧
        176: 0x2590, # ⢰
        182: 0x259C, # ⢶
        184: 0x2590, # ⢸
        187: 0x259C, # ⢻
        190: 0x259E, # ⢾
        191: 0x259C, # ⢿
        228: 0x2584, # ⣤
        230: 0x2599, # ⣦
        231: 0x2599, # ⣧
        244: 0x2584, # ⣴
        246: 0x2588, # ⣶
        247: 0x2588, # ⣷
        252: 0x259F, # ⣼
        254: 0x259F, # ⣾
        255: 0x2588, # ⣿
    }

    o = unichr(chars.get(m, 0x2800 + m))

    if opt_double_width:
        o += o

    return o

def legacy_graph(c):
    n = ord(c.group(1)) - 0xf020
    if n >= 64: n = n - 32

    chars = {
        0b000000: 0x2800,  # EMPTY
        0b000001: 0x1FB00, # 🬀 BLOCK SEXTANT 1
        0b000010: 0x1FB01, # 🬁 BLOCK SEXTANT 2
        0b000011: 0x1FB02, # 🬂 BLOCK SEXTANT 12
        0b000100: 0x1FB03, # 🬃 BLOCK SEXTANT 3
        0b000101: 0x1FB04, # 🬄 BLOCK SEXTANT 13
        0b000110: 0x1FB05, # 🬅 BLOCK SEXTANT 23
        0b000111: 0x1FB06, # 🬆 BLOCK SEXTANT 123
        0b001000: 0x1FB07, # 🬇 BLOCK SEXTANT 4
        0b001001: 0x1FB08, # 🬈 BLOCK SEXTANT 14
        0b001010: 0x1FB09, # 🬉 BLOCK SEXTANT 24
        0b001011: 0x1FB0A, # 🬊 BLOCK SEXTANT 124
        0b001100: 0x1FB0B, # 🬋 BLOCK SEXTANT 34
        0b001101: 0x1FB0C, # 🬌 BLOCK SEXTANT 134
        0b001110: 0x1FB0D, # 🬍 BLOCK SEXTANT 234
        0b001111: 0x1FB0E, # 🬎 BLOCK SEXTANT 1234
        0b010000: 0x1FB0F, # 🬏 BLOCK SEXTANT 5
        0b010001: 0x1FB10, # 🬐 BLOCK SEXTANT 15
        0b010010: 0x1FB11, # 🬑 BLOCK SEXTANT 25
        0b010011: 0x1FB12, # 🬒 BLOCK SEXTANT 125
        0b010100: 0x1FB13, # 🬓 BLOCK SEXTANT 35
        0b010101: 0x258C,  # ▌ LEFT HALF BLOCK
        0b010110: 0x1FB14, # 🬔 BLOCK SEXTANT 235
        0b010111: 0x1FB15, # 🬕 BLOCK SEXTANT 1235
        0b011000: 0x1FB16, # 🬖 BLOCK SEXTANT 45
        0b011001: 0x1FB17, # 🬗 BLOCK SEXTANT 145
        0b011010: 0x1FB18, # 🬘 BLOCK SEXTANT 245
        0b011011: 0x1FB19, # 🬙 BLOCK SEXTANT 1245
        0b011100: 0x1FB1A, # 🬚 BLOCK SEXTANT 345
        0b011101: 0x1FB1B, # 🬛 BLOCK SEXTANT 1345
        0b011110: 0x1FB1C, # 🬜 BLOCK SEXTANT 2345
        0b011111: 0x1FB1D, # 🬝 BLOCK SEXTANT 12345
        0b100000: 0x1FB1E, # 🬞 BLOCK SEXTANT 6
        0b100001: 0x1FB1F, # 🬟 BLOCK SEXTANT 16
        0b100010: 0x1FB20, # 🬠 BLOCK SEXTANT 26
        0b100011: 0x1FB21, # 🬡 BLOCK SEXTANT 126
        0b100100: 0x1FB22, # 🬢 BLOCK SEXTANT 36
        0b100101: 0x1FB23, # 🬣 BLOCK SEXTANT 136
        0b100110: 0x1FB24, # 🬤 BLOCK SEXTANT 236
        0b100111: 0x1FB25, # 🬥 BLOCK SEXTANT 1236
        0b101000: 0x1FB26, # 🬦 BLOCK SEXTANT 46
        0b101001: 0x1FB27, # 🬧 BLOCK SEXTANT 146
        0b101010: 0x2590,  # ▐ RIGHT HALF BLOCK
        0b101011: 0x1FB28, # 🬨 BLOCK SEXTANT 1246
        0b101100: 0x1FB29, # 🬩 BLOCK SEXTANT 346
        0b101101: 0x1FB2A, # 🬪 BLOCK SEXTANT 1346
        0b101110: 0x1FB2B, # 🬫 BLOCK SEXTANT 2346
        0b101111: 0x1FB2C, # 🬬 BLOCK SEXTANT 12346
        0b110000: 0x1FB2D, # 🬭 BLOCK SEXTANT 56
        0b110001: 0x1FB2E, # 🬮 BLOCK SEXTANT 156
        0b110010: 0x1FB2F, # 🬯 BLOCK SEXTANT 256
        0b110011: 0x1FB30, # 🬰 BLOCK SEXTANT 1256
        0b110100: 0x1FB31, # 🬱 BLOCK SEXTANT 356
        0b110101: 0x1FB32, # 🬲 BLOCK SEXTANT 1356
        0b110110: 0x1FB33, # 🬳 BLOCK SEXTANT 2356
        0b110111: 0x1FB34, # 🬴 BLOCK SEXTANT 12356
        0b111000: 0x1FB35, # 🬵 BLOCK SEXTANT 456
        0b111001: 0x1FB36, # 🬶 BLOCK SEXTANT 1456
        0b111010: 0x1FB37, # 🬷 BLOCK SEXTANT 2456
        0b111011: 0x1FB38, # 🬸 BLOCK SEXTANT 12456
        0b111100: 0x1FB39, # 🬹 BLOCK SEXTANT 3456
        0b111101: 0x1FB3A, # 🬺 BLOCK SEXTANT 13456
        0b111110: 0x1FB3B, # 🬻 BLOCK SEXTANT 23456
        0b111111: 0x2588,  # █ FULL BLOCK
    }

    o = unichr(chars[n])

    if opt_double_width:
        o += o

    return o

def double_width_char(c):
    n = ord(c.group(1))
    if n >= 0x21 and n <= 0x7f:
        return unichr(n + 0xff00 - 0x20)
    else:
        return "  "


def fix_chars(l):
    if opt_charset == 'block':
        l = tt_re.sub(block_graph, l)
    if opt_charset == 'legacy':
        l = tt_re.sub(legacy_graph, l)
    if opt_charset == 'nos':
        return l
    l = tt_re.sub(braille_graph, l)
    if opt_double_width:
        l = wc_re.sub(double_width_char, l)
    return l


def show_line(scr, l):

    class Parser(HTMLParser):

        def __init__(self):
            HTMLParser.__init__(self)
            self.bg = 0

        def handle_starttag(self, tag, attrs):
            self.fg = 7
            for attr in attrs:
                if attr[0] == "class":
                    for c in re.finditer(r"(\S+)", attr[1]):
                        c = c.group(1)
                        if c in colors_fg:
                            self.fg = colors_fg[c]
                        if c in colors_bg:
                            self.bg = colors_bg[c]

            attr = 0
            if self.bg > 0:
                attr = curses.color_pair(self.fg*8 + self.bg) + curses.A_REVERSE
            else:
                attr = curses.color_pair(self.bg*8 + self.fg)

            scr.attrset(attr + curses.A_BOLD)

        def handle_endtag(self, tag):
            pass

        def handle_data(self, data):
            scr.addstr(fix_chars(data))

    scr.attrset(0)
    parser = Parser()
    parser.feed(l)


def show(scr, p, page):
    scr.erase()
    if 'content' in p:
        try:
            ls = p['content'].split('\n')
            y = 0
            for l in ls:
                scr.attrset(0)
                scr.addstr(0, 3, datetime.now().strftime('%H:%M:%S'))
                scr.move(y, 0)
                show_line(scr, html_funcs.unescape(l))
                y = y + 1
        except:
            pass
    else:
        scr.addstr(0, 36, page)
        scr.addstr(10, 12, " nothing here  ")


def main(scr):

    curses.noecho()
    curses.cbreak()
    curses.halfdelay(1)
    curses.mousemask(-1)
    curses.start_color()
    curses.curs_set(0)

    page = '100'
    page_user = ''
    page_next = ''
    ticks_idle = 0

    if len(sys.argv) > 1:
        page = sys.argv[1]

    for i in range(1, 64):
        curses.init_pair(i,(i % 8), int(i/8))

    p = load(page)

    t_refresh = time.time() + opt_refresh_interval

    while True:

        show(scr, p, page)

        if len(page_user) > 0:
            scr.addstr(0, 36, page_user + '   ')

        c = scr.getch()

        if c == -1:
            ticks_idle = ticks_idle + 1
            if ticks_idle == 10:
                page_user = ''
        else:
            ticks_idle = 0
            t_refresh = time.time() + opt_refresh_interval

        if c == curses.KEY_MOUSE:
            try:
                _, x, y, _, b = curses.getmouse()


                if b & curses.BUTTON1_CLICKED:
                    for c2 in re.finditer(r"(\d{3})", scr.instr(y, x-3, 5).decode()):
                        page_next = c2.group(1)
                if b & 65536:
                    page_next = p.get('nextPage')
                if b & 2097152:
                    page_next = p.get('prevPage')
            except:
                pass
        if c == ord('q'):
            break
        if c == ord('d'):
            global opt_double_width
            opt_double_width = not opt_double_width
        if c > 0 and c < 255 and chr(c) in bookmarks:
            page_next = bookmarks[chr(c)]
        if c == curses.KEY_DOWN or c == ord('j') or c == ord(','):
            page_next = p.get('prevSubPage')
        if c == curses.KEY_UP or c == ord('k') or c == ord('.'):
            page_next = p.get('nextSubPage')
        if c == curses.KEY_LEFT or c == ord('h') or c == ord('['):
            page_next = p.get('prevPage')
        if c == curses.KEY_RIGHT or c == ord('l') or c == ord(']'):
            page_next = p.get('nextPage')
        if c >= ord('0') and c <= ord('9'):
            page_user = page_user + chr(c)
            if len(page_user) == 3:
                page_next = page_user
                page_user = ''
        if c == 32 or time.time() > t_refresh:
            if opt_auto_refresh:
                if "nextSubPage" in p and p['nextSubPage'] != "":
                    page_next = p['nextSubPage']
                else:
                    page_next = page[0:3]
            t_refresh = time.time() + opt_refresh_interval

        if page_next and len(page_next) > 0:
            page = page_next
            page_next = None
            scr.addstr(0, 36, "***")
            scr.refresh()
            p = load(page)

    
if os.path.isfile(TTRC):
    p = ConfigParser.ConfigParser()
    p.read(TTRC)

    # RC may contain only options, so check if bookmarks is present first
    if p.has_section("bookmarks"):
        for k, v in p.items('bookmarks'):
            bookmarks[k] = v

    opt_charset = p.get("options", "charset", fallback = "braille")
    opt_auto_refresh = p.getboolean("options", "auto_refresh", fallback = True)
    opt_refresh_interval = p.getint("options", "refresh_interval", fallback = 60)
    opt_double_width = p.getboolean("options", "double_width", fallback = False)

curses.wrapper(main)

# vi: ft=python
